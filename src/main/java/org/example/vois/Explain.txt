While Spring Boot itself is a relatively modern framework (emerging around 2014),
Java applications existed long before JUnit became the de facto standard for unit testing. Even within the broader Spring ecosystem,
testing practices evolved significantly.


** Evolution of nit Testing **


1. Manual Testing / Ad-hoc Testing:

•	System.out.println() debugging: Developers would heavily rely on printing values to the console to verify intermediate results and the state of their
 application. This is highly inefficient, requires manual inspection of output, and is prone to errors.

•	Main methods for testing: A common practice was to put test logic directly into main() methods within classes,
or in separate "test runner" classes with their own main() methods. You'd compile and run these specific main methods to execute a test,
then comment them out or remove them later. There is way to tell jvm to rn which class by sing manifest file after packing project in jar.

•  Lack of test runners: There was no built-in mechanism to discover and run all tests automatically.
Developers would have to manually execute each "test" (e.g., each main method or script).

•  Manual input and verification: For UI-based applications

•  No standardized assertion library: Instead of assertEquals, assertTrue, etc.,
 developers would write their own if-else statements to check conditions and throw exceptions or print "FAIL" messages if something was wrong.

•  No setup/teardown automation: Preparing the test environment (e.g., setting up a database, initializing objects) and
cleaning up afterward would be handled manually within each test or through custom utility methods that needed to be explicitly called.

•  Limited reporting: Getting a clear, concise report of passed and failed tests was difficult.
It often involved sifting through console output or implementing rudimentary logging.



** JUNIT 4 VS JUNIT 5  **

1- Architecture

JUnit 4: Monolithic. It was a single JAR file with all the core functionality. This made it less extensible and limited its ability to adapt to new testing paradigms.

JUnit 5: Modular. It is composed of three main modules:

    JUnit Platform: The foundation for launching testing frameworks on the JVM. It provides a TestEngine API for discovering and running tests.
    TestEngine API (Low-Level, Core),This is not for test writers. It’s for people building their own testing frameworks. one of the implementation is Jupiter

    JUnit Jupiter: The programming model and extension API for writing tests in JUnit 5. It contains all the new annotations and features.
    Extension API (High-Level, Pluggable), For regular test authors who want to add behaviors before/after tests, inject dependencies, etc.


    JUnit Vintage: An engine that allows you to run tests written with JUnit 3 and JUnit 4 on the JUnit 5 platform.
    This provides excellent backward compatibility and allows for a gradual migration.


1. Test & Lifecycle Annotations

    | Annotation                           | Purpose                                                                      |
    | ------------------------------------ | ---------------------------------------------------------------------------- |
    | `@Test`                              | Marks a test method (same name as JUnit 4 but part of JUnit 5 Jupiter)       |
    | `@BeforeEach`                        | Runs **before each test method**                                             |
    | `@AfterEach`                         | Runs **after each test method**                                              |
    | `@BeforeAll`                         | Runs **once before all tests** (must be static unless using `@TestInstance`) |
    | `@AfterAll`                          | Runs **once after all tests** (must be static unless using `@TestInstance`)  |
    | `@TestInstance(Lifecycle.PER_CLASS)` | Allows non-static `@BeforeAll`/`@AfterAll`; controls test instance lifecycle |
    | `@DisplayName("Custom name")`        | Gives a readable/test-friendly name for a test class or method               |
    | `@Disabled`                          | Disables a test or test class with optional reason                           |


2. Parameterized Testing Annotations

    | Annotation                                           | Purpose                                                                      |
    | ---------------------------------------------------- | ---------------------------------------------------------------------------- |
    | `@ParameterizedTest`                                 | Runs the same test with different inputs                                     |
    | `@ValueSource`                                       | Supplies literal values to a parameterized test (e.g., int\[], String\[])    |
    | `@CsvSource`                                         | Supplies multiple parameters via inline CSV                                  |
    | `@CsvFileSource`                                     | Reads test parameters from a CSV file                                        |
    | `@MethodSource`                                      | Supplies parameters via a static method returning `Stream`, `Iterable`, etc. |
    | `@EnumSource`                                        | Supplies each constant of an enum                                            |
    | `@ArgumentsSource`                                   | Custom parameter provider                                                    |
    | `@Arguments`                                         | Used with `@MethodSource` to pass multiple values                            |
    | `@NullSource`, `@EmptySource`, `@NullAndEmptySource` | Provide `null` or empty values to parameterized tests                        |


3. Tagging and Filtering
    | Annotation     | Purpose                                                                                            |
    | -------------- | -------------------------------------------------------------------------------------------------- |
    | `@Tag("unit")` | Assigns a tag to a test or test class; useful for filtering (e.g., only run `@Tag("integration")`) |


4. Dynamic & Programmatic Tests

    | Annotation     | Purpose                                                                                  |
    | -------------- | ---------------------------------------------------------------------------------------- |
    | `@TestFactory` | Used for **dynamic tests** — returns a `Collection` or `Stream` of `DynamicTest` objects |

5. Extensions (JUnit 5 Replacement for @RunWith)

    | Annotation                         | Purpose                                                       |
    | ---------------------------------- | ------------------------------------------------------------- |
    | `@ExtendWith(SomeExtension.class)` | Registers a JUnit 5 **extension** (replaces `@RunWith`)       |
    | `@RegisterExtension`               | Registers extensions programmatically (field-level or static) |

6. Condition-based Execution (Conditional Tests)

    | Annotation                                                        | Purpose                                     |
    | ----------------------------------------------------------------- | ------------------------------------------- |
    | `@EnabledIf`, `@DisabledIf`                                       | Conditional execution (from 3rd-party libs) |
    | `@EnabledOnOs`, `@DisabledOnOs`                                   | Runs test only on specific OS               |
    | `@EnabledOnJre`, `@DisabledOnJre`                                 | Runs test only on specific Java version     |
    | `@EnabledIfEnvironmentVariable`, `@DisabledIfEnvironmentVariable` | Based on env vars                           |
    | `@EnabledIfSystemProperty`, `@DisabledIfSystemProperty`           | Based on JVM system properties              |


JUnit 4: @RunWith = one test runner
    You must use @RunWith(SomeRunner.class)
    You can only use one runner per test class

    Limitation: You can't combine multiple runners directly.

| Runner                    | Description                                                   |
| ------------------------- | ------------------------------------------------------------- |
| `BlockJUnit4ClassRunner`  | Default runner (if you don’t override)                        |
| `Parameterized`           | Runs the same test multiple times with different parameters   |
| `Suite`                   | Runs multiple test classes together                           |
| `SpringJUnit4ClassRunner` | Provided by Spring to enable Spring TestContext Framework     |
| `Theories`                | Experimental, runs tests with different data points           |
| `Enclosed`                | Runs static inner test classes                                |
| `MockitoJUnitRunner`      | Injects mocks via `@Mock`                                     |
| `Categories`              | Group tests into categories to include/exclude certain groups |



JUnit 5: @ExtendWith = extension system
    You can use multiple extensions together like plugins
    An Extension is like a plugin or helper.

    Advantages: You can have many of them, and each does one specific job.

| Extension                             | Interface                  | Description                       |
| ------------------------------------- | -------------------------- | --------------------------------- |
| `@ExtendWith(MockitoExtension.class)` | `ParameterResolver`, etc.  | Auto-inject mocks                 |
| `SpringExtension`                     | `BeforeEachCallback`, etc. | Spring Boot testing support       |

Common Extension Interface

| Interface                                  | Purpose                                   |
| ------------------------------------------ | ----------------------------------------- |
| `BeforeAllCallback`, `AfterAllCallback`    | Hook into class-level setup/teardown      |
| `BeforeEachCallback`, `AfterEachCallback`  | Hook into method-level setup/teardown     |
| `TestExecutionExceptionHandler`            | Catch and customize exception handling    |
| `ParameterResolver`                        | Inject values into test method parameters |
| `TestInstancePostProcessor`                | Modify test instance after creation       |
| `LifecycleMethodExecutionExceptionHandler` | Handle exceptions in lifecycle methods    |
| `ExecutionCondition`                       | Enable/disable tests dynamically          |

** Annotations **

1- @SpringBootTest
Purpose: To load the entire Spring application context. This is an integration test annotation.

** when to use it **
•	End-to-end integration tests: When you need to test the interaction between multiple layers of your application (web, service, repository, database, etc.) as a whole.
You want to ensure that all components work correctly together.
•	When there's no more specific slice test available: If your test scenario involves components that aren't covered by @WebMvcTest, @DataJpaTest, or other specialized slice annotations, @SpringBootTest is your fallback.
•	Testing with a real embedded server: You can configure @SpringBootTest to start an actual embedded server (e.g., Tomcat, Jetty) on a random or defined port, allowing you to make real HTTP requests to your application.
This is useful for more realistic integration tests.

** What it does **
•	Loads the full Spring ApplicationContext, including all @Component, @Service, @Repository, @Controller, etc., annotated classes.
•	Automatically searches for the main application class (the one annotated with @SpringBootApplication) to configure the context.
•	Can be configured to run with a mock web environment (MockMvc) or a real embedded server.

**Considerations **
•	Slowest: Since it loads the entire application context, @SpringBootTest is the slowest of the three.
•	Resource intensive: Requires more memory and processing power due to the full context loading.



2- @WebMvcTest
Purpose: To test the web layer (Spring MVC controllers) in isolation. This is typically used for unit or integration tests of your controllers.


When to use it:
•	Testing REST controllers: When you want to verify that your @Controller or @RestController classes are handling requests correctly,
 mapping URLs, parsing request bodies, returning proper HTTP statuses, and generating the expected JSON/XML responses.

•	Verifying input validation: Testing that your controllers correctly handle invalid input and return appropriate error messages.

•	Testing view rendering (for traditional MVC): If you're using server-side rendering (e.g., Thymeleaf, JSP), you can test that your controllers are selecting and populating the correct views.

•	Focusing on HTTP request/response handling: You are primarily concerned with the interaction between the client and your web layer.

What it does:
•	Loads a limited application context containing only web-related components: @Controller, @ControllerAdvice, @JsonComponent, WebMvcConfigurer, and HandlerMethodArgumentResolver.
•	Excludes other layers like @Service, @Repository, or @Component beans (unless explicitly included).
•	Auto-configures MockMvc, a powerful object that allows you to simulate HTTP requests to your controllers without starting a real server.
•	Often used in conjunction with @MockBean to mock the service layer or other dependencies that the controller relies on.


3- @DataJpaTest
Purpose: To test the data layer (Spring Data JPA repositories, JPA entities). This is another integration test annotation focused on persistence.

When to use it:
•	Testing repository methods: When you want to verify that your custom repository methods (e.g., findByEmail, findAllByStatus) are correctly translating into SQL queries and retrieving the expected data.
•	Verifying entity mappings: Ensuring that your JPA entity relationships, column mappings, and cascade operations are working as intended.
•	Testing database interactions: When you need to interact with a real (or in-memory) database to confirm data persistence and retrieval.

What it does:
•  Loads a limited application context specifically for JPA components: DataSource, EntityManager, Spring Data JPA repositories.
•  By default, configures an in-memory embedded database (like H2) for testing, which is fast and self-contained. You can override this if you need to test against a specific database.
•  Auto-configures TestEntityManager, a useful tool for persisting and querying entities directly within tests, bypassing the repository if needed.
•  Excludes other layers like web or service components.



** Parameterized Test **

Key Annotations/Providers:

@ParameterizedTest: Marks a method as a parameterized test.

@ValueSource: Provides a single argument to the test method from an array of primitives or Strings.

@CsvSource: Provides arguments as comma-separated values (CSV) directly within the annotation. Each line is an invocation.

@MethodSource: Refers to a static method in the same test class (or another class) that returns a Stream, Collection, Iterable, or Iterator of Arguments (or a type that can be converted to arguments). This is highly flexible for complex data.

Customizing Display Names: The name attribute in @ParameterizedTest allows you to define a pattern for the test invocation name, using placeholders like {index}, {arguments}, etc.


** Dynamic Test **

Imagine you have a scenario where You might need to generate tests dynamically based on:

1- Data from a file or database: You want to run a specific test logic for each entry in a configuration file or a database table.
2- External API responses: You're testing an API, and the number of test cases depends on the structure or content of a response from that API.
3- Complex algorithms with varying inputs: You have an algorithm that needs to be tested with a range of inputs, and generating each @Test method manually would be tedious and repetitive.


A method annotated with @TestFactory is not a test itself, but rather a factory that produces DynamicTest (or DynamicContainer) instances.

•  Returns a Collection/Stream/Iterable/Iterator of DynamicTest (or DynamicNode): The @TestFactory method must return one of these types,
containing instances of DynamicTest or DynamicContainer.

•	DynamicTest: Represents a single executable test case. It has a display name and an Executable (a lambda expression or method reference) that contains the actual test logic.
•	DynamicContainer: Allows you to group related dynamic tests, providing a hierarchical structure in your test reports.




When to Use @TestFactory vs. @ParameterizedTest?
This is a common question, as both allow you to run tests with different data.
•	@ParameterizedTest (simpler, more common):

    o	Used when you have a fixed test method logic but want to run it with different input parameters.
    o	The test method itself is a single, defined method.
    o	Uses various @Source annotations (like @ValueSource, @MethodSource, @CsvSource) to provide arguments to the test method's parameters.
    o	Each parameter set results in a separate invocation of the same test method.
    o	Lifecycle: @BeforeEach and @AfterEach are executed for each invocation of the parameterized test.
    o	Good for: Simple data variations for a consistent test logic.


•	@TestFactory (more flexible, for truly dynamic scenarios):

    o	Used when you need to generate completely different test cases at runtime, where even the test logic itself might vary slightly or the number of tests isn't fixed beforehand.
    o	The factory method returns test cases, which can have entirely different executables (lambdas).
    o	Lifecycle: @BeforeEach and @AfterEach are not executed for each individual DynamicTest generated by the factory. They run only once for the @TestFactory method itself.
    o	Good for:
    	Discovering tests from external sources (files, databases).
    	Generating tests based on complex runtime conditions.
    	When you need to create tests with varying execution logic beyond just parameter variations.
    	When the number of tests might not be known until runtime.




















